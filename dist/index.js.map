{"version":3,"file":"index.js","mappings":"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","sources":["webpack://react-twitch-embed-video/webpack/universalModuleDefinition","webpack://react-twitch-embed-video/./src/index.tsx","webpack://react-twitch-embed-video/./src/loadEmbedApi.tsx","webpack://react-twitch-embed-video/./src/useEmbedApi.tsx","webpack://react-twitch-embed-video/./src/useEventListener.tsx","webpack://react-twitch-embed-video/./src/usePlayerPlay.tsx","webpack://react-twitch-embed-video/./src/usePlayerReady.tsx","webpack://react-twitch-embed-video/./src/utils/constants.ts","webpack://react-twitch-embed-video/./src/utils/index.ts","webpack://react-twitch-embed-video/./src/utils/tuplify.ts","webpack://react-twitch-embed-video/./node_modules/window-or-global/lib/index.js","webpack://react-twitch-embed-video/external \"react\"","webpack://react-twitch-embed-video/webpack/bootstrap","webpack://react-twitch-embed-video/webpack/runtime/global","webpack://react-twitch-embed-video/webpack/before-startup","webpack://react-twitch-embed-video/webpack/startup","webpack://react-twitch-embed-video/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-twitch-embed-video\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"react-twitch-embed-video\"] = factory(root[\"react\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE_react__) {\nreturn ","import React, { useEffect, useRef } from 'react'\nimport root from 'window-or-global'\n\nimport { loadEmbedApi } from './loadEmbedApi'\nimport {\n  IChannelEmbedParameters,\n  ITwitchWindow,\n  IVodCollectionEmbedParameters,\n  IVodEmbedParameters,\n  useTwitchEmbed,\n} from './useEmbedApi'\nimport { useEventListener } from './useEventListener'\nimport { usePlayerPlay } from './usePlayerPlay'\nimport { usePlayerReady } from './usePlayerReady'\nimport { DEFAULT_HEIGHT, DEFAULT_TARGET_ID, DEFAULT_WIDTH } from './utils'\n\nconst hasTwitchApiLoaded = () =>\n  Boolean((root as unknown as ITwitchWindow)?.Twitch?.Embed)\n\nconst TwitchEmbedVideo = (\n  props:\n    | IChannelEmbedParameters\n    | IVodCollectionEmbedParameters\n    | IVodEmbedParameters,\n) => {\n  const { width, height, targetId, targetClass } = props\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [embed, initializeEmbed] = useTwitchEmbed(props)\n\n  const eventListenerFactory = useEventListener(embed)\n  const onPlayerReady = usePlayerReady(embed, props)\n  const onPlayerPlay = usePlayerPlay(embed, props)\n\n  useEffect(() => {\n    if (!hasTwitchApiLoaded()) return\n\n    const { VIDEO_PLAY, VIDEO_READY } = (root as unknown as ITwitchWindow)\n      .Twitch.Embed\n\n    const removeVideoPlayListener = eventListenerFactory(\n      VIDEO_PLAY,\n      onPlayerPlay,\n    )\n\n    const removePlayerReadyEventListener = eventListenerFactory(\n      VIDEO_READY,\n      onPlayerReady,\n    )\n\n    return () => {\n      removePlayerReadyEventListener()\n      removeVideoPlayListener()\n    }\n  }, [onPlayerReady, eventListenerFactory, onPlayerPlay])\n\n  // Builds the Twitch Embed\n  useEffect(() => {\n    if (containerRef && containerRef.current)\n      containerRef.current.innerHTML = ''\n\n    // Check if we have Twitch in the global space and Embed is available\n    if (hasTwitchApiLoaded()) {\n      initializeEmbed()\n\n      return\n    }\n\n    // Initialize the Twitch embed lib if not present\n    loadEmbedApi(initializeEmbed)\n  }, [initializeEmbed])\n\n  return (\n    <div\n      ref={containerRef}\n      style={{ width, height }}\n      className={targetClass}\n      id={targetId}\n    />\n  )\n}\n\nTwitchEmbedVideo.defaultProps = {\n  targetId: DEFAULT_TARGET_ID,\n  width: DEFAULT_HEIGHT,\n  height: DEFAULT_WIDTH,\n  autoplay: true,\n  muted: false,\n}\n\nexport default React.memo(TwitchEmbedVideo)\n","export const EMBED_URL = 'https://embed.twitch.tv/embed/v1.js'\n\nconst func: () => unknown = () => {}\n\nconst loadEmbedApi = (callback = func): void => {\n  // Check if the script tag already exists\n  if(document.querySelector(\"script[src='https://embed.twitch.tv/embed/v1.js']\"))\n    return\n\n  const script = document.createElement('script')\n\n  script.setAttribute('src', EMBED_URL)\n  // Wait for DOM to finishing loading before we try loading embed\n  script.addEventListener('load', callback)\n  document.body.append(script)\n}\n\nexport { loadEmbedApi }\n","import { useCallback, useState } from 'react'\nimport root from 'window-or-global'\n\nimport { tuplify } from './utils'\n\ninterface IVideoPlayEventCallback {\n  (): void\n}\n\ninterface IPlaybackStatsInterface {\n  backendVersion: string\n  bufferSize: number\n  codecs: string\n  displayResolution: string\n  fps: number\n  hlsLatencyBroadcaster: number\n  playbackRate: number\n  skippedFrames: number\n  videoResolution: string\n}\n\nexport interface IPlayerInterface {\n  /** Disables display of Closed Captions. */\n  disableCaptions(): void\n  /**  */\n  enableCaptions(): void\n  /**  */\n  pause(): void\n  /**  */\n  play(): void\n  /**  */\n  seek(timestamp: number): void\n  /**  */\n  setChannel(channel: string): void\n  /**  */\n  setCollection(collection_id: string, video_id: string): void\n  /**  */\n  setQuality(quality: string): void\n  /**  */\n  setVideo(video_id: string, timestamp: number): void\n  getMuted(): boolean\n  setMuted(muted: boolean): void\n  getVolume(): number\n  setVolume(volumelevel: number): void\n  getPlaybackStats(): IPlaybackStatsInterface\n  getChannel(): string\n  getCurrentTime(): number\n  getDuration(): number\n  getEnded(): boolean\n  getQualities(): string[]\n  getQuality(): string\n  getVideo(): string\n  isPaused(): boolean\n}\n\ninterface IVideoReadyEventCallback {\n  (player: IPlayerInterface): void\n}\n\ninterface IBaseEmbedParameters {\n  /** If true, the player can go full screen. Default: true. */\n  allowfullscreen?: boolean\n  /** If true, the video starts playing automatically, without the user clicking play.\n   * The exception is mobile platforms, on which video cannot be played without user\n   * interaction. Default: true. */\n  autoplay?: boolean\n  /** Specifies the type of chat to use. Valid values:\n   *\n   * _default: Default value, uses full-featured chat._\n   *\n   * _mobile: Uses a read-only version of chat, optimized for mobile devices._\n   *\n   * To omit chat, specify a value of video for the layout option. */\n  chat?: 'default' | 'mobile'\n  /** Maximum width of the rendered element, in pixels. This can be expressed as a\n   * percentage, by passing a string like 100% */\n  height?: string | number\n  /** Determines the screen layout. Valid values:\n   *\n   * _video-with-chat: Default if channel is provided. Shows both video and chat side-by-side.\n   * At narrow sizes, chat renders under the video player._\n   *\n   * _video: Default if channel is not provided. Shows only the video player (omits chat)._ */\n  layout?: 'video' | 'video-with-chat'\n  /** Specifies whether the initial state of the video is muted. _Default: false._ */\n  muted?: boolean\n  /** The video started playing. This callback receives an object with a sessionId property. */\n  onPlay?: IVideoPlayEventCallback\n  /** The video player is ready for API commands. This callback receives the player object. */\n  onReady?: IVideoReadyEventCallback\n  /** Required if your site is embedded on any domain(s) other than the one that instantiates\n   *  the Twitch embed.\n   *\n   * Example parent parameter: [\"streamernews.example.com\", \"embed.example.com\"]. */\n  parent?: string[]\n  /** Custom class name for div wrapper */\n  targetClass?: string\n  /** Custom id to target, used if you're going to have multiple players on the page */\n  targetId?: string\n  /** The Twitch embed color theme to use.\n   *\n   * Valid values: light or dark.\n   *\n   * _Default: light or the users chosen theme on Twitch._ */\n  theme?: 'light' | 'dark'\n  /** Time in the video where playback starts. Specifies hours, minutes, and seconds.\n   *\n   * Default: 0h0m0s (the start of the video). */\n  time?: string\n  /** Width of video embed including chat */\n  width?: string | number\n}\n\nexport interface IChannelEmbedParameters extends IBaseEmbedParameters {\n  /** Optional for VOD embeds; otherwise, required. Name of the chat room and channel to stream. */\n  channel: string\n}\n\nexport interface IVodCollectionEmbedParameters extends IBaseEmbedParameters {\n  /** The VOD collection to play. If you use this, you may also specify an initial video\n   * in the VOD collection, otherwise playback will begin with the first video in the collection.\n   * All VODs are auto-played. Chat replay is not supported.\n   *\n   * Example parameters object:\n   *\n   * `\"{ video: \"124085610\", collection: \"GMEgKwTQpRQwyA\" }\"` */\n  collection: { video: string; collection: string }\n}\n\nexport interface IVodEmbedParameters extends IBaseEmbedParameters {\n  /** ID of a VOD to play. Chat replay is not supported. */\n  video: string\n}\n\nexport interface ITwitchEmbed {\n  addEventListener(\n    event: string,\n    callback: IVideoPlayEventCallback | IVideoReadyEventCallback,\n  ): void\n  removeEventListener(\n    event: string,\n    callback: IVideoPlayEventCallback | IVideoReadyEventCallback,\n  ): void\n  getPlayer(): IPlayerInterface\n}\n\ninterface ITwitchEmbedConstructor {\n  VIDEO_PLAY: string\n  VIDEO_READY: string\n  new (\n    id: string,\n    parameters:\n      | IChannelEmbedParameters\n      | IVodCollectionEmbedParameters\n      | IVodEmbedParameters,\n  ): ITwitchEmbed\n}\n\ninterface ITwitch {\n  Embed: ITwitchEmbedConstructor\n}\n\nexport interface ITwitchWindow {\n  Twitch: ITwitch\n}\n\nconst useTwitchEmbed = (\n  props:\n    | IChannelEmbedParameters\n    | IVodCollectionEmbedParameters\n    | IVodEmbedParameters,\n) => {\n  const [embed, setEmbed] = useState<ITwitchEmbed>()\n\n  const initialize = useCallback(() => {\n    const twitchEmbed = new (root as unknown as ITwitchWindow).Twitch.Embed(\n      props.targetId ?? '',\n      {\n        ...props,\n      },\n    )\n\n    setEmbed(twitchEmbed)\n  }, [props])\n\n  return tuplify(embed, initialize)\n}\n\nexport { useTwitchEmbed }\n","import { useCallback } from 'react'\n\nimport { ITwitchEmbed } from './useEmbedApi'\n\ninterface IAddEventListener {\n  (event: string, callback: () => void): () => void\n}\n\nconst noop = (): void => {}\n\nconst useEventListener = (\n  embedObj: ITwitchEmbed | undefined,\n): IAddEventListener =>\n  useCallback(\n    (event, callback) => {\n      if (!embedObj) return noop\n\n      embedObj.addEventListener(event, callback)\n\n      return () => embedObj.removeEventListener(event, callback)\n    },\n    [embedObj],\n  )\n\nexport { useEventListener }\n","import { useCallback, useState } from 'react'\n\nimport {\n  IChannelEmbedParameters,\n  ITwitchEmbed,\n  IVodCollectionEmbedParameters,\n  IVodEmbedParameters,\n} from './useEmbedApi'\n\ninterface IPlayAction {\n  (): void\n}\n\nconst usePlayerPlay = (\n  Embed: ITwitchEmbed | undefined,\n  {\n    autoplay,\n    onPlay,\n  }:\n    | IChannelEmbedParameters\n    | IVodCollectionEmbedParameters\n    | IVodEmbedParameters,\n): IPlayAction => {\n  const [shouldForcePlay, setForcePlay] = useState<boolean | undefined>(\n    autoplay,\n  )\n\n  return useCallback(() => {\n    if (!Embed) return null\n\n    if (shouldForcePlay) return onPlay && onPlay()\n\n    const player = Embed.getPlayer()\n\n    player.pause()\n    setForcePlay(true)\n  }, [onPlay, Embed, setForcePlay, shouldForcePlay])\n}\n\nexport { usePlayerPlay }\n","import { useCallback } from 'react'\n\nimport {\n  IChannelEmbedParameters,\n  IPlayerInterface,\n  ITwitchEmbed,\n  IVodCollectionEmbedParameters,\n  IVodEmbedParameters,\n} from './useEmbedApi'\n\nconst Volume = {\n  MUTED: 0,\n  AUDIBLE: 1,\n}\n\nconst ensureAutoPlay = (\n  player: IPlayerInterface,\n  isAutoPlay?: boolean,\n): unknown => !isAutoPlay && player.pause()\n\nconst ensureVolume = (player: IPlayerInterface, isMuted?: boolean): void => {\n  player.setVolume(isMuted ? Volume.MUTED : Volume.AUDIBLE)\n}\n\ninterface IReadyAction {\n  (): void\n}\n\nconst usePlayerReady = (\n  Embed: ITwitchEmbed | undefined,\n  {\n    autoplay: isAutoPlay,\n    muted: isMuted,\n    onReady,\n  }:\n    | IChannelEmbedParameters\n    | IVodCollectionEmbedParameters\n    | IVodEmbedParameters,\n): IReadyAction =>\n  useCallback(() => {\n    if (!Embed) {\n      // eslint-disable-next-line no-console\n      console.warn('Player not provided')\n\n      return\n    }\n\n    const player = Embed.getPlayer()\n\n    ensureVolume(player, isMuted)\n    ensureAutoPlay(player, isAutoPlay)\n\n    onReady && onReady(player)\n  }, [Embed, isMuted, isAutoPlay, onReady])\n\nexport { usePlayerReady }\n","export const DEFAULT_TARGET_ID = 'twitch-embed'\nexport const DEFAULT_WIDTH = '940'\nexport const DEFAULT_HEIGHT = '480'\n","export * from './constants'\nexport * from './tuplify'\n","export function tuplify<T extends unknown[]>(...elements: T) {\n  return elements\n}\n","'use strict'\nmodule.exports = (typeof self === 'object' && self.self === self && self) ||\n  (typeof global === 'object' && global.global === global && global) ||\n  this\n","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.tsx\");\n",""],"names":[],"sourceRoot":""}